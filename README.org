* ChiME

This is a framework for computing the two body matrix elements, reduced in total
angular momentum and isospin spaces, of electroweak operators in the 3D harmonic
oscillator basis. At present ChiME is capable of only producing relative matrix
elements, i.e. matrix elements of operators without center of mass contribution.

** Requirements
ChiME depends on several libraries as follows:
  - [[https://github.com/CLIUtils/CLI11.git][CLI11]]
  - GNU Scientific Library (GSL)
  - [[https://github.com/e-eight/basis.git][basis]] (This in turn depends on boost and Eigen.)
  - [[https://github.com/e-eight/am.git][am]]
  - [[https://github.com/e-eight/am.git][mcutils]]
  - [[https://github.com/fmtlib/fmt][fmt]]
The code is written in C++14. You will need a compiler that supports that.

** Usage
To use this make sure that =GSL=, =boost=, =Eigen= are present in your
system. =CMake= build generation files are provided to help with building ChiME.
Alternatively you can write your own build files for your favorite build system.
To use the provided =CMake= files proceed as follows (make sure that you at least
have =cmake= 3.1 and =make= on your system):
#+BEGIN_SRC bash
  git clone git@github.com:e-eight/chime.git
  cd chime
  mkdir build
  cd build
  cmake ..
  make
#+END_SRC

The instructions above assumes that you are cloning with =SSH=. However if that
is not the case, and you are using =HTTPS=, then the cloning command will be
=git clone https://github.com/e-eight/chime.git=. You will also have to update the
=.gitmodules= file accordingly to use =HTTPS= instead of =SSH=.

To add your own operators use the =charge_radius.h= and =charge_radius.cpp= files
as templates. Once you have created the header and source files for your
operator, include the header file in =operators.h=. If you use the provided
=CMakeLists.txt= to build the software, then add the new source and header
files to the =CMakeLists.txt= in =src=.

At present only the matrix elements upto N4LO are calculated. If higher orders
are required then first add them to the enum class =Order= and to the class
=Operator= in =chiral.h=, and to the method =ReducedMatrixElement= in
=chiral.cpp=.

ChiME accepts the following inputs:
  - (string) name :: Name of the operator
  - (string) order :: lo, nlo, n2lo, n3lo, n4lo
  - (double) hw :: Oscillator energy
  - (int) Nmax :: Maximum number of 3DHO quanta of basis
  - (int) Jmax :: Maximum total angular momentum of basis
  - (int) T0_min, T0_max :: Range of isospin components of operator

The recommended way to enter this inputs is via a configuration file. See the
provided =rsq_input.ini= in =input= for the format. Once you have the created
the configuration file you can run it as follows. Assuming you are in =build=,
#+BEGIN_SRC bash
  ./chime.exe -c <path-to-config>/name.ini
#+END_SRC
where =name.ini= is your configuration file.

These inputs can also be given as flags as shown below.
#+BEGIN_SRC bash
  ./chime.exe -n rsq -o n2lo -N 200
#+END_SRC

Use =chime.exe -h= to get the full list of flags.

ChiME will produce a set of timestamped files. For example if the given order is
=n2lo=, then ChiME will produced files that contain the individual contributions
at LO, NLO, and N2LO, and also a fourth file containing the total matrix elements.

** To Do
  - Add support for operators with center of mass contribution. :: urgent
  - Add support for multivariate integration procedures.
    + Monte Carlo
    + Bicubic Spline
    + Adaptive Simpson
  - Precompute and store integrals for faster evaluation.
  - Add support for other compilers.

** Contributors
  - Soham Pal (Developed the original C version. Theory and lead code developer.)
  - Robert Basili (Ported the original C version to C++. Tester.)
  - Shiplu Sarker (Theory developer.)

** License
ChiME is licensed under the MIT license (see =LICENSE= for details). The libraries
that ChiME depends on may have different licenses. Please check those project for
further details about their licenses.
