!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/4f9f6f83/
$(exe)	Makefile	/^$(exe): $(obj)$/;"	t
.PHONY	Makefile	/^.PHONY = all clean$/;"	m
AM_H_	src/basis/am/am.h	/^#define AM_H_$/;"	d
AllocatedEntries	src/basis/operator.h	/^    std::size_t AllocatedEntries(const basis::OperatorBlocks<tFloat>& matrices)$/;"	f	namespace:basis	typeref:typename:std::size_t
AllowedTriangle	src/basis/am/am.h	/^    bool AllowedTriangle(const HalfInt& h1, const HalfInt& h2, const HalfInt& h3)$/;"	f	namespace:am	typeref:typename:bool
AngularMomentumJRME	src/basis/am/rme.h	/^  double AngularMomentumJRME(const HalfInt& Jp, const HalfInt& J)$/;"	f	namespace:am	typeref:typename:double
AngularMomentumRangeIntersection	src/basis/am/am.h	/^    HalfInt::pair AngularMomentumRangeIntersection($/;"	f	namespace:am	typeref:typename:HalfInt::pair
AngularMomentumRangeIntersection	src/basis/am/am.h	/^    HalfInt::pair AngularMomentumRangeIntersection(const HalfInt::pair& r1, const HalfInt::pair&/;"	f	namespace:am	typeref:typename:HalfInt::pair
BASIS_BASIS_H_	src/basis/basis.h	/^#define BASIS_BASIS_H_$/;"	d
BASIS_JT_OPERATOR_H_	src/basis/jt_operator.h	/^#define BASIS_JT_OPERATOR_H_$/;"	d
BASIS_LSJT_OPERATOR_H_	src/basis/lsjt_operator.h	/^#define BASIS_LSJT_OPERATOR_H_$/;"	d
BASIS_LSJT_SCHEME_H_	src/basis/lsjt_scheme.h	/^#define BASIS_LSJT_SCHEME_H_$/;"	d
BASIS_MANY_BODY_H_	src/basis/many_body.h	/^#define BASIS_MANY_BODY_H_$/;"	d
BASIS_OPERATOR_H_	src/basis/operator.h	/^#define BASIS_OPERATOR_H_$/;"	d
BaseSector	src/basis/basis.h	/^      BaseSector($/;"	f	class:basis::BaseSector
BaseSector	src/basis/basis.h	/^    class BaseSector$/;"	c	namespace:basis
BaseSectors	src/basis/basis.h	/^    class BaseSectors$/;"	c	namespace:basis
BaseSpace	src/basis/basis.h	/^    class BaseSpace$/;"	c	namespace:basis
BaseState	src/basis/basis.h	/^      BaseState(const SubspaceType& subspace, const StateLabelsType& state_labels)$/;"	f	class:basis::BaseState
BaseState	src/basis/basis.h	/^      BaseState(const SubspaceType& subspace, int index)$/;"	f	class:basis::BaseState
BaseState	src/basis/basis.h	/^    class BaseState$/;"	c	namespace:basis
BaseSubspace	src/basis/basis.h	/^    BaseSubspace() : dimension_(0) {}$/;"	f	class:basis::BaseSubspace
BaseSubspace	src/basis/basis.h	/^    class BaseSubspace$/;"	c	namespace:basis
CHIRAL_H	src/chiral.h	/^#define CHIRAL_H$/;"	d
CXX	Makefile	/^CXX = g++$/;"	m
CanonicalizeIndices	src/basis/operator.h	/^    CanonicalizeIndices($/;"	f	namespace:basis	typeref:typename:std::tuple<int,int,int,int,bool>
CanonicalizeIndicesJT	src/basis/jt_operator.h	/^    std::tuple<int,int,bool,double> CanonicalizeIndicesJT($/;"	f	namespace:basis	typeref:typename:std::tuple<int,int,bool,double>
CanonicalizeIndicesJT	src/basis/jt_operator.h	/^    std::tuple<int,int,int,int,bool,double> CanonicalizeIndicesJT($/;"	f	namespace:basis	typeref:typename:std::tuple<int,int,int,int,bool,double>
ChargeRadiusOperator	src/operator_rc_sq.cpp	/^    ChargeRadiusOperator::ChargeRadiusOperator():$/;"	f	class:chiral::ChargeRadiusOperator
ChargeRadiusOperator	src/operator_rc_sq.h	/^    class ChargeRadiusOperator : public ChiralOperator$/;"	c	namespace:chiral
ChiralOperator	src/chiral.cpp	/^    ChiralOperator::ChiralOperator():$/;"	f	class:chiral::ChiralOperator
ChiralOperator	src/chiral.cpp	/^    ChiralOperator::ChiralOperator(Name name):$/;"	f	class:chiral::ChiralOperator
ChiralOperator	src/chiral.cpp	/^    ChiralOperator::ChiralOperator(Name name, Order order):$/;"	f	class:chiral::ChiralOperator
ChiralOperator	src/chiral.cpp	/^    ChiralOperator::ChiralOperator(Name name, Order order, int J0, int T0):$/;"	f	class:chiral::ChiralOperator
ChiralOperator	src/chiral.cpp	/^    ChiralOperator::ChiralOperator(Name name, int J0, int T0):$/;"	f	class:chiral::ChiralOperator
ChiralOperator	src/chiral.h	/^    class ChiralOperator$/;"	c	namespace:chiral
ClearOperatorJT	src/basis/jt_operator.h	/^    void ClearOperatorJT($/;"	f	namespace:basis	typeref:typename:void
ClebschGordan	src/basis/am/wigner_gsl.h	/^    double ClebschGordan($/;"	f	namespace:am	typeref:typename:double
ClebschGordan2	src/basis/am/wigner_gsl_twice.h	/^    double ClebschGordan2($/;"	f	namespace:am	typeref:typename:double
ConstructIdentityOperatorRelativeLSJT	src/basis/lsjt_operator.cpp	/^  void ConstructIdentityOperatorRelativeLSJT($/;"	f	namespace:basis	typeref:typename:void
ConstructZeroOperatorRelativeLSJT	src/basis/lsjt_operator.cpp	/^  void ConstructZeroOperatorRelativeLSJT($/;"	f	namespace:basis	typeref:typename:void
ContainsSector	src/basis/basis.h	/^      bool ContainsSector(const typename SectorType::KeyType& key) const$/;"	f	class:basis::BaseSectors	typeref:typename:DEPRECATED ("")bool
ContainsSector	src/basis/basis.h	/^      bool ContainsSector(int bra_subspace_index, int ket_subspace_index, int multiplicity_index/;"	f	class:basis::BaseSectors	typeref:typename:bool
ContainsState	src/basis/basis.h	/^    bool ContainsState(const StateLabelsType& state_labels) const$/;"	f	class:basis::BaseSubspace	typeref:typename:bool
ContainsSubspace	src/basis/basis.h	/^      bool ContainsSubspace(const typename SubspaceType::SubspaceLabelsType& subspace_labels) co/;"	f	class:basis::BaseSpace	typeref:typename:bool
DEPRECATED	src/basis/mcutils/deprecated.h	/^#    define DEPRECATED(/;"	d
DebugStr	src/basis/basis.h	/^    std::string BaseSectors<tSpaceType>::DebugStr() const$/;"	f	class:basis::BaseSectors	typeref:typename:std::string
DebugStr	src/basis/lsjt_scheme.cpp	/^  std::string RelativeCMSpaceLSJT::DebugStr() const$/;"	f	class:basis::RelativeCMSpaceLSJT	typeref:typename:std::string
DebugStr	src/basis/lsjt_scheme.cpp	/^  std::string RelativeCMSpaceLSJTN::DebugStr() const$/;"	f	class:basis::RelativeCMSpaceLSJTN	typeref:typename:std::string
DebugStr	src/basis/lsjt_scheme.cpp	/^  std::string RelativeCMSubspaceLSJT::DebugStr() const$/;"	f	class:basis::RelativeCMSubspaceLSJT	typeref:typename:std::string
DebugStr	src/basis/lsjt_scheme.cpp	/^  std::string RelativeCMSubspaceLSJTN::DebugStr() const$/;"	f	class:basis::RelativeCMSubspaceLSJTN	typeref:typename:std::string
DebugStr	src/basis/lsjt_scheme.cpp	/^  std::string RelativeSpaceLSJT::DebugStr() const$/;"	f	class:basis::RelativeSpaceLSJT	typeref:typename:std::string
DebugStr	src/basis/lsjt_scheme.cpp	/^  std::string RelativeSubspaceLSJT::DebugStr() const$/;"	f	class:basis::RelativeSubspaceLSJT	typeref:typename:std::string
DebugStr	src/basis/lsjt_scheme.cpp	/^  std::string TwoBodySpaceLSJT::DebugStr() const$/;"	f	class:basis::TwoBodySpaceLSJT	typeref:typename:std::string
DebugStr	src/basis/lsjt_scheme.cpp	/^  std::string TwoBodySpaceLSJTN::DebugStr() const$/;"	f	class:basis::TwoBodySpaceLSJTN	typeref:typename:std::string
DebugStr	src/basis/lsjt_scheme.cpp	/^  std::string TwoBodySubspaceLSJT::DebugStr() const$/;"	f	class:basis::TwoBodySubspaceLSJT	typeref:typename:std::string
DebugStr	src/basis/lsjt_scheme.cpp	/^  std::string TwoBodySubspaceLSJTN::DebugStr() const$/;"	f	class:basis::TwoBodySubspaceLSJTN	typeref:typename:std::string
Dimension	src/basis/basis.h	/^      int Dimension() const$/;"	f	class:basis::BaseSpace	typeref:typename:int
FileExistCheck	src/basis/mcutils/parsing.cpp	/^  bool FileExistCheck(const std::string& filename, bool exit_on_nonexist, bool warn_on_overwrite/;"	f	namespace:mcutils	typeref:typename:bool
GatherOperatorRelativeCMLSJTNToRelativeCMLSJT	src/basis/lsjt_operator.cpp	/^  void GatherOperatorRelativeCMLSJTNToRelativeCMLSJT($/;"	f	namespace:basis	typeref:typename:void
GatherOperatorTwoBodyLSJTNToTwoBodyLSJT	src/basis/lsjt_operator.cpp	/^  void GatherOperatorTwoBodyLSJTNToTwoBodyLSJT($/;"	f	namespace:basis	typeref:typename:void
GetLine	src/basis/mcutils/parsing.h	/^  inline std::basic_istream<CharT, Traits>& GetLine($/;"	f	namespace:mcutils	typeref:typename:std::basic_istream<CharT,Traits> &
GetLine	src/basis/mcutils/parsing.h	/^  inline std::basic_istream<CharT,Traits>& GetLine($/;"	f	namespace:mcutils	typeref:typename:std::basic_istream<CharT,Traits> &
GetSector	src/basis/basis.h	/^      const SectorType& GetSector(int sector_index) const$/;"	f	class:basis::BaseSectors	typeref:typename:const SectorType &
GetStateLabels	src/basis/basis.h	/^      const StateLabelsType& GetStateLabels() const$/;"	f	class:basis::BaseState	typeref:typename:DEPRECATED ("")const StateLabelsType &
GetStateLabels	src/basis/basis.h	/^    const StateLabelsType& GetStateLabels(int index) const$/;"	f	class:basis::BaseSubspace	typeref:typename:const StateLabelsType &
GetSubspace	src/basis/basis.h	/^      const SubspaceType& GetSubspace(int i) const$/;"	f	class:basis::BaseSpace	typeref:typename:const SubspaceType &
GetSubspaceLabels	src/basis/basis.h	/^    const SubspaceLabelsType& GetSubspaceLabels() const$/;"	f	class:basis::BaseSubspace	typeref:typename:DEPRECATED ("")const SubspaceLabelsType &
HALFINT_H_	src/basis/am/halfint.h	/^#define HALFINT_H_$/;"	d
HBARC	old_c/constants.c	/^const double HBARC = 197.3269602; \/\/ (in MeV fm)$/;"	v	typeref:typename:const double
HBARC	src/constants.h	/^    const double HBARC = 197.3269602; \/\/ (in MeV fm)$/;"	v	namespace:constants	typeref:typename:const double
HalfInt	src/basis/am/halfint.h	/^  HalfInt() : twice_value_(0) {};$/;"	f	class:HalfInt
HalfInt	src/basis/am/halfint.h	/^class HalfInt$/;"	c
HalfInt	src/basis/am/halfint.h	/^inline HalfInt::HalfInt(int numerator, int denominator)$/;"	f	class:HalfInt
HalfInt	src/basis/am/halfint.h	/^inline HalfInt::HalfInt(int value)$/;"	f	class:HalfInt
Hat	src/basis/am/halfint.h	/^double Hat(const HalfInt& j)$/;"	f	typeref:typename:double
Hat	src/basis/am/halfint.h	/^double Hat(int j)$/;"	f	typeref:typename:double
Hat2	src/basis/am/wigner_gsl_twice.h	/^    double Hat2(int two_j)$/;"	f	namespace:am	typeref:typename:double
IsDiagonal	src/basis/basis.h	/^      inline bool IsDiagonal() const$/;"	f	class:basis::BaseSector	typeref:typename:bool
IsInteger	src/basis/am/halfint.h	/^  bool IsInteger() const$/;"	f	class:HalfInt	typeref:typename:bool
IsInteger	src/basis/am/halfint.h	/^inline bool IsInteger(const HalfInt& h)$/;"	f	typeref:typename:bool
IsUpperTriangle	src/basis/basis.h	/^      inline bool IsUpperTriangle() const$/;"	f	class:basis::BaseSector	typeref:typename:bool
J	src/basis/lsjt_scheme.h	/^      int J() const {return std::get<2>(labels_);}$/;"	f	class:basis::RelativeCMSubspaceLSJT	typeref:typename:int
J	src/basis/lsjt_scheme.h	/^      int J() const {return std::get<2>(labels_);}$/;"	f	class:basis::RelativeCMSubspaceLSJTN	typeref:typename:int
J	src/basis/lsjt_scheme.h	/^      int J() const {return std::get<2>(labels_);}$/;"	f	class:basis::RelativeSubspaceLSJT	typeref:typename:int
J	src/basis/lsjt_scheme.h	/^      int J() const {return std::get<2>(labels_);}$/;"	f	class:basis::TwoBodySubspaceLSJT	typeref:typename:int
J	src/basis/lsjt_scheme.h	/^      int J() const {return std::get<2>(labels_);}$/;"	f	class:basis::TwoBodySubspaceLSJTN	typeref:typename:int
J	src/basis/lsjt_scheme.h	/^    int J() const {return subspace().J();}$/;"	f	class:basis::RelativeCMStateLSJT	typeref:typename:int
J	src/basis/lsjt_scheme.h	/^    int J() const {return subspace().J();}$/;"	f	class:basis::RelativeCMStateLSJTN	typeref:typename:int
J	src/basis/lsjt_scheme.h	/^    int J() const {return subspace().J();}$/;"	f	class:basis::RelativeStateLSJT	typeref:typename:int
J	src/basis/lsjt_scheme.h	/^    int J() const {return subspace().J();}$/;"	f	class:basis::TwoBodyStateLSJT	typeref:typename:int
J	src/basis/lsjt_scheme.h	/^    int J() const {return subspace().J();}$/;"	f	class:basis::TwoBodyStateLSJTN	typeref:typename:int
J0	src/basis/jt_operator.h	/^    int J0, g0, T0_min, T0_max;$/;"	m	struct:basis::OperatorLabelsJT	typeref:typename:int
J0	src/chiral.h	/^        int J0; \/\/ Tensor rank$/;"	m	class:chiral::ChiralOperator	typeref:typename:int
Jmax	src/basis/lsjt_operator.h	/^    int Nmax, Jmax;$/;"	m	struct:basis::RelativeOperatorParametersLSJT	typeref:typename:int
Jmax	src/basis/lsjt_scheme.h	/^    int Jmax() const {return Jmax_;}$/;"	f	class:basis::RelativeSpaceLSJT	typeref:typename:int
Jmax_	src/basis/lsjt_scheme.h	/^    int Nmax_, Jmax_;$/;"	m	class:basis::RelativeSpaceLSJT	typeref:typename:int
Key	src/basis/basis.h	/^      inline KeyType Key() const$/;"	f	class:basis::BaseSector	typeref:typename:KeyType
KeyType	src/basis/basis.h	/^      typedef std::tuple<int,int,int> KeyType;$/;"	t	class:basis::BaseSector	typeref:typename:std::tuple<int,int,int>
L	old_c/tdho.h	/^struct q_nums { int n; int l; int N; int L; int s;$/;"	m	struct:q_nums	typeref:typename:int
L	src/basis/lsjt_scheme.h	/^      int L() const {return std::get<0>(labels_);}$/;"	f	class:basis::RelativeCMSubspaceLSJT	typeref:typename:int
L	src/basis/lsjt_scheme.h	/^      int L() const {return std::get<0>(labels_);}$/;"	f	class:basis::RelativeCMSubspaceLSJTN	typeref:typename:int
L	src/basis/lsjt_scheme.h	/^      int L() const {return std::get<0>(labels_);}$/;"	f	class:basis::RelativeSubspaceLSJT	typeref:typename:int
L	src/basis/lsjt_scheme.h	/^      int L() const {return std::get<0>(labels_);}$/;"	f	class:basis::TwoBodySubspaceLSJT	typeref:typename:int
L	src/basis/lsjt_scheme.h	/^      int L() const {return std::get<0>(labels_);}$/;"	f	class:basis::TwoBodySubspaceLSJTN	typeref:typename:int
L	src/basis/lsjt_scheme.h	/^    int L() const {return subspace().L();}$/;"	f	class:basis::RelativeCMStateLSJT	typeref:typename:int
L	src/basis/lsjt_scheme.h	/^    int L() const {return subspace().L();}$/;"	f	class:basis::RelativeCMStateLSJTN	typeref:typename:int
L	src/basis/lsjt_scheme.h	/^    int L() const {return subspace().L();}$/;"	f	class:basis::RelativeStateLSJT	typeref:typename:int
L	src/basis/lsjt_scheme.h	/^    int L() const {return subspace().L();}$/;"	f	class:basis::TwoBodyStateLSJT	typeref:typename:int
L	src/basis/lsjt_scheme.h	/^    int L() const {return subspace().L();}$/;"	f	class:basis::TwoBodyStateLSJTN	typeref:typename:int
LFLAGS	Makefile	/^LFLAGS = -lgomp -lm -lgsl -lgslcblas$/;"	m
LJCoupledSphericalHarmonicCRME	src/basis/am/rme.h	/^  double LJCoupledSphericalHarmonicCRME($/;"	f	namespace:am	typeref:typename:double
LJCoupledSphericalHarmonicYRME	src/basis/am/rme.h	/^  double LJCoupledSphericalHarmonicYRME($/;"	f	namespace:am	typeref:typename:double
LabelStr	src/basis/lsjt_scheme.cpp	/^  std::string RelativeCMSubspaceLSJT::LabelStr() const$/;"	f	class:basis::RelativeCMSubspaceLSJT	typeref:typename:std::string
LabelStr	src/basis/lsjt_scheme.cpp	/^  std::string RelativeCMSubspaceLSJTN::LabelStr() const$/;"	f	class:basis::RelativeCMSubspaceLSJTN	typeref:typename:std::string
LabelStr	src/basis/lsjt_scheme.cpp	/^  std::string RelativeSubspaceLSJT::LabelStr() const$/;"	f	class:basis::RelativeSubspaceLSJT	typeref:typename:std::string
LabelStr	src/basis/lsjt_scheme.cpp	/^  std::string TwoBodySubspaceLSJT::LabelStr() const$/;"	f	class:basis::TwoBodySubspaceLSJT	typeref:typename:std::string
LabelStr	src/basis/lsjt_scheme.cpp	/^  std::string TwoBodySubspaceLSJTN::LabelStr() const$/;"	f	class:basis::TwoBodySubspaceLSJTN	typeref:typename:std::string
LookUpSectorIndex	src/basis/basis.h	/^      int LookUpSectorIndex(const typename SectorType::KeyType& key) const$/;"	f	class:basis::BaseSectors	typeref:typename:DEPRECATED ("")int
LookUpSectorIndex	src/basis/basis.h	/^      int LookUpSectorIndex(int bra_subspace_index, int ket_subspace_index, int multiplicity_ind/;"	f	class:basis::BaseSectors	typeref:typename:int
LookUpStateIndex	src/basis/basis.h	/^    int LookUpStateIndex(const StateLabelsType& state_labels) const$/;"	f	class:basis::BaseSubspace	typeref:typename:int
LookUpSubspace	src/basis/basis.h	/^      const SubspaceType& LookUpSubspace(const typename SubspaceType::SubspaceLabelsType& subspa/;"	f	class:basis::BaseSpace	typeref:typename:const SubspaceType &
LookUpSubspaceIndex	src/basis/basis.h	/^      int LookUpSubspaceIndex(const typename SubspaceType::SubspaceLabelsType& subspace_labels) /;"	f	class:basis::BaseSpace	typeref:typename:int
MAKEFILE_STANDALONE	src/basis/am/project.mk	/^MAKEFILE_STANDALONE = true$/;"	m
MAKEFILE_STANDALONE	src/basis/mcutils/project.mk	/^MAKEFILE_STANDALONE = true$/;"	m
MAKEFILE_STANDALONE	src/basis/project.mk	/^MAKEFILE_STANDALONE = true$/;"	m
MCUTILS_DEPRECATED_H_	src/basis/mcutils/deprecated.h	/^#define MCUTILS_DEPRECATED_H_$/;"	d
MCUTILS_PARSING_H_	src/basis/mcutils/parsing.h	/^#define MCUTILS_PARSING_H_$/;"	d
MatrixFile	main.py	/^class MatrixFile:$/;"	c
MatrixVector	src/basis/operator.h	/^  typedef basis::OperatorBlocks<double> MatrixVector;$/;"	t	namespace:basis	typeref:typename:basis::OperatorBlocks<double>
N	old_c/tdho.h	/^struct q_nums { int n; int l; int N; int L; int s;$/;"	m	struct:q_nums	typeref:typename:int
N	src/basis/lsjt_scheme.h	/^      int N() const {return std::get<5>(labels_);}  \/\/ (MODIFICATION for subspacing by N)$/;"	f	class:basis::RelativeCMSubspaceLSJTN	typeref:typename:int
N	src/basis/lsjt_scheme.h	/^      int N() const {return std::get<5>(labels_);}  \/\/ (MODIFICATION for subspacing by N)$/;"	f	class:basis::TwoBodySubspaceLSJTN	typeref:typename:int
N	src/basis/lsjt_scheme.h	/^    int N() const {return  Nr()+Nc();}$/;"	f	class:basis::RelativeCMStateLSJT	typeref:typename:int
N	src/basis/lsjt_scheme.h	/^    int N() const {return  Nr()+Nc();}$/;"	f	class:basis::RelativeCMStateLSJTN	typeref:typename:int
N	src/basis/lsjt_scheme.h	/^    int N() const {return N1()+N2();}$/;"	f	class:basis::TwoBodyStateLSJT	typeref:typename:int
N	src/basis/lsjt_scheme.h	/^    int N() const {return N1()+N2();}$/;"	f	class:basis::TwoBodyStateLSJTN	typeref:typename:int
N	src/basis/lsjt_scheme.h	/^    int N() const {return std::get<0>(labels());}$/;"	f	class:basis::RelativeStateLSJT	typeref:typename:int
N1	src/basis/lsjt_scheme.h	/^    int N1() const {return std::get<0>(labels());}$/;"	f	class:basis::TwoBodyStateLSJT	typeref:typename:int
N1	src/basis/lsjt_scheme.h	/^    int N1() const {return std::get<0>(labels());}$/;"	f	class:basis::TwoBodyStateLSJTN	typeref:typename:int
N1max	src/basis/lsjt_scheme.h	/^      int N1max() const {return N1max_;}$/;"	f	class:basis::TwoBodySubspaceLSJT	typeref:typename:int
N1max	src/basis/lsjt_scheme.h	/^      int N1max() const {return N1max_;}$/;"	f	class:basis::TwoBodySubspaceLSJTN	typeref:typename:int
N1max	src/basis/lsjt_scheme.h	/^    int N1max() const {return N1max_;}$/;"	f	class:basis::TwoBodySpaceLSJT	typeref:typename:int
N1max	src/basis/lsjt_scheme.h	/^    int N1max() const {return N1max_;}$/;"	f	class:basis::TwoBodySpaceLSJTN	typeref:typename:int
N1max_	src/basis/lsjt_scheme.h	/^      int N1max_, N2max_;$/;"	m	class:basis::TwoBodySubspaceLSJT	typeref:typename:int
N1max_	src/basis/lsjt_scheme.h	/^      int N1max_, N2max_;$/;"	m	class:basis::TwoBodySubspaceLSJTN	typeref:typename:int
N1max_	src/basis/lsjt_scheme.h	/^    int N1max_, N2max_;$/;"	m	class:basis::TwoBodySpaceLSJT	typeref:typename:int
N1max_	src/basis/lsjt_scheme.h	/^    int N1max_, N2max_;$/;"	m	class:basis::TwoBodySpaceLSJTN	typeref:typename:int
N2	src/basis/lsjt_scheme.h	/^    int N2() const {return std::get<2>(labels());}$/;"	f	class:basis::TwoBodyStateLSJT	typeref:typename:int
N2	src/basis/lsjt_scheme.h	/^    int N2() const {return std::get<2>(labels());}$/;"	f	class:basis::TwoBodyStateLSJTN	typeref:typename:int
N2max	src/basis/lsjt_scheme.h	/^      int N2max() const {return N2max_;}$/;"	f	class:basis::TwoBodySubspaceLSJT	typeref:typename:int
N2max	src/basis/lsjt_scheme.h	/^      int N2max() const {return N2max_;}$/;"	f	class:basis::TwoBodySubspaceLSJTN	typeref:typename:int
N2max	src/basis/lsjt_scheme.h	/^    int N2max() const {return N2max_;}$/;"	f	class:basis::TwoBodySpaceLSJT	typeref:typename:int
N2max	src/basis/lsjt_scheme.h	/^    int N2max() const {return N2max_;}$/;"	f	class:basis::TwoBodySpaceLSJTN	typeref:typename:int
N2max_	src/basis/lsjt_scheme.h	/^      int N1max_, N2max_;$/;"	m	class:basis::TwoBodySubspaceLSJT	typeref:typename:int
N2max_	src/basis/lsjt_scheme.h	/^      int N1max_, N2max_;$/;"	m	class:basis::TwoBodySubspaceLSJTN	typeref:typename:int
N2max_	src/basis/lsjt_scheme.h	/^    int N1max_, N2max_;$/;"	m	class:basis::TwoBodySpaceLSJT	typeref:typename:int
N2max_	src/basis/lsjt_scheme.h	/^    int N1max_, N2max_;$/;"	m	class:basis::TwoBodySpaceLSJTN	typeref:typename:int
N_	src/basis/lsjt_scheme.h	/^      int N_;  \/\/ (MODIFICATION for subspacing by N)$/;"	m	class:basis::RelativeCMSubspaceLSJTN	typeref:typename:int
N_	src/basis/lsjt_scheme.h	/^      int N_;  \/\/ (MODIFICATION for subspacing by N)$/;"	m	class:basis::TwoBodySubspaceLSJTN	typeref:typename:int
Name	src/chiral.h	/^    enum class Name$/;"	g	namespace:chiral
Nc	src/basis/lsjt_scheme.h	/^    int Nc() const {return std::get<2>(labels());}$/;"	f	class:basis::RelativeCMStateLSJT	typeref:typename:int
Nc	src/basis/lsjt_scheme.h	/^    int Nc() const {return std::get<2>(labels());}$/;"	f	class:basis::RelativeCMStateLSJTN	typeref:typename:int
Nmax	src/basis/lsjt_operator.h	/^    int Nmax, Jmax;$/;"	m	struct:basis::RelativeOperatorParametersLSJT	typeref:typename:int
Nmax	src/basis/lsjt_operator.h	/^    int Nmax;$/;"	m	struct:basis::RelativeCMOperatorParametersLSJT	typeref:typename:int
Nmax	src/basis/lsjt_scheme.h	/^      int Nmax() const {return Nmax_;}$/;"	f	class:basis::RelativeCMSubspaceLSJT	typeref:typename:int
Nmax	src/basis/lsjt_scheme.h	/^      int Nmax() const {return Nmax_;}$/;"	f	class:basis::RelativeSubspaceLSJT	typeref:typename:int
Nmax	src/basis/lsjt_scheme.h	/^    int Nmax() const {return Nmax_;}$/;"	f	class:basis::RelativeCMSpaceLSJT	typeref:typename:int
Nmax	src/basis/lsjt_scheme.h	/^    int Nmax() const {return Nmax_;}$/;"	f	class:basis::RelativeCMSpaceLSJTN	typeref:typename:int
Nmax	src/basis/lsjt_scheme.h	/^    int Nmax() const {return Nmax_;}$/;"	f	class:basis::RelativeSpaceLSJT	typeref:typename:int
Nmax_	src/basis/lsjt_scheme.h	/^      int Nmax_;$/;"	m	class:basis::RelativeCMSubspaceLSJT	typeref:typename:int
Nmax_	src/basis/lsjt_scheme.h	/^      int Nmax_;$/;"	m	class:basis::RelativeSubspaceLSJT	typeref:typename:int
Nmax_	src/basis/lsjt_scheme.h	/^    int Nmax_, Jmax_;$/;"	m	class:basis::RelativeSpaceLSJT	typeref:typename:int
Nmax_	src/basis/lsjt_scheme.h	/^    int Nmax_;$/;"	m	class:basis::RelativeCMSpaceLSJT	typeref:typename:int
Nmax_	src/basis/lsjt_scheme.h	/^    int Nmax_;$/;"	m	class:basis::RelativeCMSpaceLSJTN	typeref:typename:int
NormalizationConversion	src/basis/many_body.h	/^  enum class NormalizationConversion {kNone, kASToNAS, kNASToAS};$/;"	g	namespace:basis
Nr	src/basis/lsjt_scheme.h	/^    int Nr() const {return std::get<0>(labels());}$/;"	f	class:basis::RelativeCMStateLSJT	typeref:typename:int
Nr	src/basis/lsjt_scheme.h	/^    int Nr() const {return std::get<0>(labels());}$/;"	f	class:basis::RelativeCMStateLSJTN	typeref:typename:int
OPERATOR_RC_SQ_H	src/operator_rc_sq.h	/^#define OPERATOR_RC_SQ_H$/;"	d
OpenCheck	src/basis/mcutils/parsing.cpp	/^  void OpenCheck(bool success, const std::string& filename)$/;"	f	namespace:mcutils	typeref:typename:void
OperatorBlock	src/basis/operator.h	/^    using OperatorBlock = Eigen::Matrix<tFloat,Eigen::Dynamic,Eigen::Dynamic>;$/;"	t	namespace:basis	typeref:typename:Eigen::Matrix<tFloat,Eigen::Dynamic,Eigen::Dynamic>
OperatorBlocks	src/basis/operator.h	/^    using OperatorBlocks = std::vector<OperatorBlock<tFloat>>;$/;"	t	namespace:basis	typeref:typename:std::vector<OperatorBlock<tFloat>>
OperatorLabelsJT	src/basis/jt_operator.h	/^  OperatorLabelsJT()$/;"	f	struct:basis::OperatorLabelsJT
OperatorLabelsJT	src/basis/jt_operator.h	/^  OperatorLabelsJT(int J0_, int g0_, int T0_min_, int T0_max_, basis::SymmetryPhaseMode symmetry/;"	f	struct:basis::OperatorLabelsJT
OperatorLabelsJT	src/basis/jt_operator.h	/^  struct OperatorLabelsJT$/;"	s	namespace:basis
Order	src/chiral.h	/^    enum class Order$/;"	g	namespace:chiral
PION_MASS	old_c/constants.c	/^const double PION_MASS = 134.9770; \/\/ (in MeV\/c^2)$/;"	v	typeref:typename:const double
PION_MASS	src/constants.h	/^    const double PION_MASS = 134.9770; \/\/ (in MeV\/c^2)$/;"	v	namespace:constants	typeref:typename:const double
ParitySign	src/basis/am/halfint.h	/^int ParitySign(const HalfInt& sum)$/;"	f	typeref:typename:int
ParitySign	src/basis/am/halfint.h	/^int ParitySign(int sum)$/;"	f	typeref:typename:int
ParitySign2	src/basis/am/wigner_gsl_twice.h	/^    int ParitySign2(int two_sum)$/;"	f	namespace:am	typeref:typename:int
ParsingCheck	src/basis/mcutils/parsing.cpp	/^  void ParsingCheck(std::istringstream& line_stream, int line_count, const std::string& line)$/;"	f	namespace:mcutils	typeref:typename:void
ParsingError	src/basis/mcutils/parsing.cpp	/^  void ParsingError(int line_count, const std::string& line, const std::string& message)$/;"	f	namespace:mcutils	typeref:typename:void
ProductAngularMomenta	src/basis/am/am.cpp	/^  HalfInt::vector ProductAngularMomenta(const HalfInt& j1, const HalfInt& j2)$/;"	f	namespace:am	typeref:typename:HalfInt::vector
ProductAngularMomentumRange	src/basis/am/am.h	/^    HalfInt::pair ProductAngularMomentumRange(const HalfInt& j1, const HalfInt& j2)$/;"	f	namespace:am	typeref:typename:HalfInt::pair
PushSector	src/basis/basis.h	/^      void PushSector(const SectorType& sector)$/;"	f	class:basis::BaseSectors	typeref:typename:void
PushStateLabels	src/basis/basis.h	/^    void PushStateLabels(const StateLabelsType& state_labels)$/;"	f	class:basis::BaseSubspace	typeref:typename:void
PushSubspace	src/basis/basis.h	/^      void PushSubspace(const SubspaceType& subspace)$/;"	f	class:basis::BaseSpace	typeref:typename:void
RACAH_REDUCTION_H_	src/basis/am/racah_reduction.h	/^#define RACAH_REDUCTION_H_$/;"	d
RED_NUCLEON_MASS	old_c/constants.c	/^const double RED_NUCLEON_MASS = 469.4593340; \/\/ (in MeV\/c^2)$/;"	v	typeref:typename:const double
RED_NUCLEON_MASS	src/constants.h	/^    const double RED_NUCLEON_MASS = 469.4593340; \/\/ (in MeV\/c^2)$/;"	v	namespace:constants	typeref:typename:const double
RME_H_	src/basis/am/rme.h	/^#define RME_H_$/;"	d
R_ES_SQUARED	old_c/constants.c	/^const double R_ES_SQUARED = 0.777; $/;"	v	typeref:typename:const double
R_ES_SQUARED	src/constants.h	/^    const double R_ES_SQUARED = 0.777;$/;"	v	namespace:constants	typeref:typename:const double
RacahReductionFactor12DotRose	src/basis/am/racah_reduction.h	/^  double RacahReductionFactor12DotRose($/;"	f	namespace:am	typeref:typename:double
RacahReductionFactor12Rose	src/basis/am/racah_reduction.h	/^  double RacahReductionFactor12Rose($/;"	f	namespace:am	typeref:typename:double
RacahReductionFactor1Rose	src/basis/am/racah_reduction.h	/^  double RacahReductionFactor1Rose($/;"	f	namespace:am	typeref:typename:double
RacahReductionFactor2Rose	src/basis/am/racah_reduction.h	/^  double RacahReductionFactor2Rose($/;"	f	namespace:am	typeref:typename:double
RacahReductionFactorRose	src/basis/am/racah_reduction.h	/^  double RacahReductionFactorRose($/;"	f	namespace:am	typeref:typename:double
Rank	src/basis/many_body.h	/^  enum class Rank {kOneBody=1, kTwoBody=2, kThreeBody=3, kFourBody=4};$/;"	g	namespace:basis
ReadRelativeCMOperatorParametersLSJT	src/basis/lsjt_operator.cpp	/^  void ReadRelativeCMOperatorParametersLSJT($/;"	f	namespace:basis	typeref:typename:void
ReadRelativeOperatorComponentLSJT	src/basis/lsjt_operator.cpp	/^  void ReadRelativeOperatorComponentLSJT($/;"	f	namespace:basis	typeref:typename:void
ReadRelativeOperatorLSJT	src/basis/lsjt_operator.cpp	/^  void ReadRelativeOperatorLSJT($/;"	f	namespace:basis	typeref:typename:void
ReadRelativeOperatorParametersLSJT	src/basis/lsjt_operator.cpp	/^  void ReadRelativeOperatorParametersLSJT($/;"	f	namespace:basis	typeref:typename:void
RecastLabelsRelativeCMLSJTToRelativeCMLSJTN	src/basis/lsjt_operator.cpp	/^  void RecastLabelsRelativeCMLSJTToRelativeCMLSJTN($/;"	f	namespace:basis	typeref:typename:void
RecastLabelsTwoBodyLSJTToTwoBodyLSJTN	src/basis/lsjt_operator.cpp	/^  void RecastLabelsTwoBodyLSJTToTwoBodyLSJTN($/;"	f	namespace:basis	typeref:typename:void
RelativeCMOperatorParametersLSJT	src/basis/lsjt_operator.h	/^    RelativeCMOperatorParametersLSJT($/;"	f	struct:basis::RelativeCMOperatorParametersLSJT
RelativeCMOperatorParametersLSJT	src/basis/lsjt_operator.h	/^    RelativeCMOperatorParametersLSJT()$/;"	f	struct:basis::RelativeCMOperatorParametersLSJT
RelativeCMOperatorParametersLSJT	src/basis/lsjt_operator.h	/^  struct RelativeCMOperatorParametersLSJT$/;"	s	namespace:basis
RelativeCMSectorsLSJT	src/basis/lsjt_scheme.cpp	/^  RelativeCMSectorsLSJT::RelativeCMSectorsLSJT($/;"	f	class:basis::RelativeCMSectorsLSJT
RelativeCMSectorsLSJT	src/basis/lsjt_scheme.h	/^    RelativeCMSectorsLSJT() {};$/;"	f	class:basis::RelativeCMSectorsLSJT
RelativeCMSectorsLSJT	src/basis/lsjt_scheme.h	/^  class RelativeCMSectorsLSJT$/;"	c	namespace:basis
RelativeCMSectorsLSJTN	src/basis/lsjt_scheme.cpp	/^  RelativeCMSectorsLSJTN::RelativeCMSectorsLSJTN($/;"	f	class:basis::RelativeCMSectorsLSJTN
RelativeCMSectorsLSJTN	src/basis/lsjt_scheme.h	/^    RelativeCMSectorsLSJTN() {};$/;"	f	class:basis::RelativeCMSectorsLSJTN
RelativeCMSectorsLSJTN	src/basis/lsjt_scheme.h	/^  class RelativeCMSectorsLSJTN$/;"	c	namespace:basis
RelativeCMSpaceLSJT	src/basis/lsjt_scheme.cpp	/^  RelativeCMSpaceLSJT::RelativeCMSpaceLSJT(int Nmax)$/;"	f	class:basis::RelativeCMSpaceLSJT
RelativeCMSpaceLSJT	src/basis/lsjt_scheme.h	/^    RelativeCMSpaceLSJT() {};$/;"	f	class:basis::RelativeCMSpaceLSJT
RelativeCMSpaceLSJT	src/basis/lsjt_scheme.h	/^  class RelativeCMSpaceLSJT$/;"	c	namespace:basis
RelativeCMSpaceLSJTN	src/basis/lsjt_scheme.cpp	/^  RelativeCMSpaceLSJTN::RelativeCMSpaceLSJTN(int Nmax)$/;"	f	class:basis::RelativeCMSpaceLSJTN
RelativeCMSpaceLSJTN	src/basis/lsjt_scheme.h	/^    RelativeCMSpaceLSJTN() {};$/;"	f	class:basis::RelativeCMSpaceLSJTN
RelativeCMSpaceLSJTN	src/basis/lsjt_scheme.h	/^  class RelativeCMSpaceLSJTN$/;"	c	namespace:basis
RelativeCMStateLSJT	src/basis/lsjt_scheme.h	/^    RelativeCMStateLSJT(const SubspaceType& subspace, const StateLabelsType& state_labels)$/;"	f	class:basis::RelativeCMStateLSJT
RelativeCMStateLSJT	src/basis/lsjt_scheme.h	/^    RelativeCMStateLSJT(const SubspaceType& subspace, int index)$/;"	f	class:basis::RelativeCMStateLSJT
RelativeCMStateLSJT	src/basis/lsjt_scheme.h	/^  class RelativeCMStateLSJT$/;"	c	namespace:basis
RelativeCMStateLSJTLabels	src/basis/lsjt_scheme.h	/^  typedef std::tuple<int,int,int,int> RelativeCMStateLSJTLabels;$/;"	t	namespace:basis	typeref:typename:std::tuple<int,int,int,int>
RelativeCMStateLSJTN	src/basis/lsjt_scheme.h	/^    RelativeCMStateLSJTN(const SubspaceType& subspace, const StateLabelsType& state_labels)$/;"	f	class:basis::RelativeCMStateLSJTN
RelativeCMStateLSJTN	src/basis/lsjt_scheme.h	/^    RelativeCMStateLSJTN(const SubspaceType& subspace, int index)$/;"	f	class:basis::RelativeCMStateLSJTN
RelativeCMStateLSJTN	src/basis/lsjt_scheme.h	/^  class RelativeCMStateLSJTN$/;"	c	namespace:basis
RelativeCMStateLSJTNLabels	src/basis/lsjt_scheme.h	/^  typedef std::tuple<int,int,int,int> RelativeCMStateLSJTNLabels;$/;"	t	namespace:basis	typeref:typename:std::tuple<int,int,int,int>
RelativeCMSubspaceLSJT	src/basis/lsjt_scheme.cpp	/^  RelativeCMSubspaceLSJT::RelativeCMSubspaceLSJT(int L, int S, int J, int T, int g, int Nmax)$/;"	f	class:basis::RelativeCMSubspaceLSJT
RelativeCMSubspaceLSJT	src/basis/lsjt_scheme.h	/^      RelativeCMSubspaceLSJT() {};$/;"	f	class:basis::RelativeCMSubspaceLSJT
RelativeCMSubspaceLSJT	src/basis/lsjt_scheme.h	/^  class RelativeCMSubspaceLSJT$/;"	c	namespace:basis
RelativeCMSubspaceLSJTLabels	src/basis/lsjt_scheme.h	/^  typedef std::tuple<int,int,int,int,int> RelativeCMSubspaceLSJTLabels;$/;"	t	namespace:basis	typeref:typename:std::tuple<int,int,int,int,int>
RelativeCMSubspaceLSJTN	src/basis/lsjt_scheme.cpp	/^  RelativeCMSubspaceLSJTN::RelativeCMSubspaceLSJTN(int L, int S, int J, int T, int g, int N)$/;"	f	class:basis::RelativeCMSubspaceLSJTN
RelativeCMSubspaceLSJTN	src/basis/lsjt_scheme.h	/^      RelativeCMSubspaceLSJTN() {};$/;"	f	class:basis::RelativeCMSubspaceLSJTN
RelativeCMSubspaceLSJTN	src/basis/lsjt_scheme.h	/^  class RelativeCMSubspaceLSJTN$/;"	c	namespace:basis
RelativeCMSubspaceLSJTNLabels	src/basis/lsjt_scheme.h	/^  typedef std::tuple<int,int,int,int,int,int> RelativeCMSubspaceLSJTNLabels;  \/\/ (MODIFICATION/;"	t	namespace:basis	typeref:typename:std::tuple<int,int,int,int,int,int>
RelativeOperatorParametersLSJT	src/basis/lsjt_operator.h	/^    RelativeOperatorParametersLSJT($/;"	f	struct:basis::RelativeOperatorParametersLSJT
RelativeOperatorParametersLSJT	src/basis/lsjt_operator.h	/^    RelativeOperatorParametersLSJT()$/;"	f	struct:basis::RelativeOperatorParametersLSJT
RelativeOperatorParametersLSJT	src/basis/lsjt_operator.h	/^  struct RelativeOperatorParametersLSJT$/;"	s	namespace:basis
RelativeSectorsLSJT	src/basis/lsjt_scheme.cpp	/^  RelativeSectorsLSJT::RelativeSectorsLSJT($/;"	f	class:basis::RelativeSectorsLSJT
RelativeSectorsLSJT	src/basis/lsjt_scheme.h	/^    RelativeSectorsLSJT() {};$/;"	f	class:basis::RelativeSectorsLSJT
RelativeSectorsLSJT	src/basis/lsjt_scheme.h	/^  class RelativeSectorsLSJT$/;"	c	namespace:basis
RelativeSpaceLSJT	src/basis/lsjt_scheme.cpp	/^  RelativeSpaceLSJT::RelativeSpaceLSJT(int Nmax, int Jmax)$/;"	f	class:basis::RelativeSpaceLSJT
RelativeSpaceLSJT	src/basis/lsjt_scheme.h	/^    RelativeSpaceLSJT() {};$/;"	f	class:basis::RelativeSpaceLSJT
RelativeSpaceLSJT	src/basis/lsjt_scheme.h	/^  class RelativeSpaceLSJT$/;"	c	namespace:basis
RelativeStateLSJT	src/basis/lsjt_scheme.h	/^    RelativeStateLSJT(const SubspaceType& subspace, const StateLabelsType& state_labels)$/;"	f	class:basis::RelativeStateLSJT
RelativeStateLSJT	src/basis/lsjt_scheme.h	/^    RelativeStateLSJT(const SubspaceType& subspace, int index)$/;"	f	class:basis::RelativeStateLSJT
RelativeStateLSJT	src/basis/lsjt_scheme.h	/^  class RelativeStateLSJT$/;"	c	namespace:basis
RelativeStateLSJTLabels	src/basis/lsjt_scheme.h	/^  typedef std::tuple<int> RelativeStateLSJTLabels;$/;"	t	namespace:basis	typeref:typename:std::tuple<int>
RelativeSubspaceLSJT	src/basis/lsjt_scheme.cpp	/^  RelativeSubspaceLSJT::RelativeSubspaceLSJT(int L, int S, int J, int T, int g, int Nmax)$/;"	f	class:basis::RelativeSubspaceLSJT
RelativeSubspaceLSJT	src/basis/lsjt_scheme.h	/^      RelativeSubspaceLSJT() {};$/;"	f	class:basis::RelativeSubspaceLSJT
RelativeSubspaceLSJT	src/basis/lsjt_scheme.h	/^  class RelativeSubspaceLSJT$/;"	c	namespace:basis
RelativeSubspaceLSJTLabels	src/basis/lsjt_scheme.h	/^  typedef std::tuple<int,int,int,int,int> RelativeSubspaceLSJTLabels;$/;"	t	namespace:basis	typeref:typename:std::tuple<int,int,int,int,int>
S	src/basis/lsjt_scheme.h	/^      int S() const {return std::get<1>(labels_);}$/;"	f	class:basis::RelativeCMSubspaceLSJT	typeref:typename:int
S	src/basis/lsjt_scheme.h	/^      int S() const {return std::get<1>(labels_);}$/;"	f	class:basis::RelativeCMSubspaceLSJTN	typeref:typename:int
S	src/basis/lsjt_scheme.h	/^      int S() const {return std::get<1>(labels_);}$/;"	f	class:basis::RelativeSubspaceLSJT	typeref:typename:int
S	src/basis/lsjt_scheme.h	/^      int S() const {return std::get<1>(labels_);}$/;"	f	class:basis::TwoBodySubspaceLSJT	typeref:typename:int
S	src/basis/lsjt_scheme.h	/^      int S() const {return std::get<1>(labels_);}$/;"	f	class:basis::TwoBodySubspaceLSJTN	typeref:typename:int
S	src/basis/lsjt_scheme.h	/^    int S() const {return subspace().S();}$/;"	f	class:basis::RelativeCMStateLSJT	typeref:typename:int
S	src/basis/lsjt_scheme.h	/^    int S() const {return subspace().S();}$/;"	f	class:basis::RelativeCMStateLSJTN	typeref:typename:int
S	src/basis/lsjt_scheme.h	/^    int S() const {return subspace().S();}$/;"	f	class:basis::RelativeStateLSJT	typeref:typename:int
S	src/basis/lsjt_scheme.h	/^    int S() const {return subspace().S();}$/;"	f	class:basis::TwoBodyStateLSJT	typeref:typename:int
S	src/basis/lsjt_scheme.h	/^    int S() const {return subspace().S();}$/;"	f	class:basis::TwoBodyStateLSJTN	typeref:typename:int
SectorDirection	src/basis/basis.h	/^  enum class SectorDirection {kCanonical,kBoth};$/;"	g	namespace:basis
SectorType	src/basis/basis.h	/^      typedef BaseSector<SubspaceType> SectorType;$/;"	t	class:basis::BaseSectors	typeref:typename:BaseSector<SubspaceType>
SetOperatorToDiagonalConstant	src/basis/operator.h	/^  void SetOperatorToDiagonalConstant($/;"	f	namespace:basis	typeref:typename:void
SetOperatorToIdentity	src/basis/operator.h	/^  void SetOperatorToIdentity($/;"	f	namespace:basis	typeref:typename:void
SetOperatorToZero	src/basis/operator.h	/^  void SetOperatorToZero($/;"	f	namespace:basis	typeref:typename:void
SpaceType	src/basis/basis.h	/^      typedef tSpaceType SpaceType;$/;"	t	class:basis::BaseSectors	typeref:typename:tSpaceType
SphericalHarmonicCRME	src/basis/am/rme.h	/^  double SphericalHarmonicCRME(const int& lp, const int& l, const int& k)$/;"	f	namespace:am	typeref:typename:double
SphericalHarmonicYRME	src/basis/am/rme.h	/^  double SphericalHarmonicYRME(const int& lp, const int& l, const int& k)$/;"	f	namespace:am	typeref:typename:double
StateLabelsType	src/basis/basis.h	/^      typedef typename SubspaceType::StateLabelsType StateLabelsType;$/;"	t	class:basis::BaseState	typeref:typename:SubspaceType::StateLabelsType
StateLabelsType	src/basis/basis.h	/^    typedef tStateLabelsType StateLabelsType;$/;"	t	class:basis::BaseSubspace	typeref:typename:tStateLabelsType
Str	src/basis/am/halfint.cpp	/^std::string HalfInt::Str() const$/;"	f	class:HalfInt	typeref:typename:std::string
StreamCheck	src/basis/mcutils/parsing.cpp	/^  void StreamCheck(bool success, const std::string& filename, const std::string& message)$/;"	f	namespace:mcutils	typeref:typename:void
Subspace	src/basis/basis.h	/^      const SubspaceType& Subspace() const$/;"	f	class:basis::BaseState	typeref:typename:DEPRECATED ("")const SubspaceType &
SubspaceLabelsType	src/basis/basis.h	/^    typedef tSubspaceLabelsType SubspaceLabelsType;$/;"	t	class:basis::BaseSubspace	typeref:typename:tSubspaceLabelsType
SubspaceType	src/basis/basis.h	/^      typedef tSubspaceType SubspaceType;$/;"	t	class:basis::BaseSector	typeref:typename:tSubspaceType
SubspaceType	src/basis/basis.h	/^      typedef tSubspaceType SubspaceType;$/;"	t	class:basis::BaseSpace	typeref:typename:tSubspaceType
SubspaceType	src/basis/basis.h	/^      typedef tSubspaceType SubspaceType;$/;"	t	class:basis::BaseState	typeref:typename:tSubspaceType
SubspaceType	src/basis/basis.h	/^      typedef typename tSpaceType::SubspaceType SubspaceType;$/;"	t	class:basis::BaseSectors	typeref:typename:tSpaceType::SubspaceType
SymmetryPhaseMode	src/basis/jt_operator.h	/^  enum class SymmetryPhaseMode {kHermitian=0};$/;"	g	namespace:basis
T	src/basis/lsjt_scheme.h	/^      int T() const {return std::get<3>(labels_);}$/;"	f	class:basis::RelativeCMSubspaceLSJT	typeref:typename:int
T	src/basis/lsjt_scheme.h	/^      int T() const {return std::get<3>(labels_);}$/;"	f	class:basis::RelativeCMSubspaceLSJTN	typeref:typename:int
T	src/basis/lsjt_scheme.h	/^      int T() const {return std::get<3>(labels_);}$/;"	f	class:basis::RelativeSubspaceLSJT	typeref:typename:int
T	src/basis/lsjt_scheme.h	/^      int T() const {return std::get<3>(labels_);}$/;"	f	class:basis::TwoBodySubspaceLSJT	typeref:typename:int
T	src/basis/lsjt_scheme.h	/^      int T() const {return std::get<3>(labels_);}$/;"	f	class:basis::TwoBodySubspaceLSJTN	typeref:typename:int
T	src/basis/lsjt_scheme.h	/^    int T() const {return subspace().T();}$/;"	f	class:basis::RelativeCMStateLSJT	typeref:typename:int
T	src/basis/lsjt_scheme.h	/^    int T() const {return subspace().T();}$/;"	f	class:basis::RelativeCMStateLSJTN	typeref:typename:int
T	src/basis/lsjt_scheme.h	/^    int T() const {return subspace().T();}$/;"	f	class:basis::RelativeStateLSJT	typeref:typename:int
T	src/basis/lsjt_scheme.h	/^    int T() const {return subspace().T();}$/;"	f	class:basis::TwoBodyStateLSJT	typeref:typename:int
T	src/basis/lsjt_scheme.h	/^    int T() const {return subspace().T();}$/;"	f	class:basis::TwoBodyStateLSJTN	typeref:typename:int
T0	src/chiral.h	/^        int T0; \/\/ Isotensor rank$/;"	m	class:chiral::ChiralOperator	typeref:typename:int
T0_max	src/basis/jt_operator.h	/^    int J0, g0, T0_min, T0_max;$/;"	m	struct:basis::OperatorLabelsJT	typeref:typename:int
T0_min	src/basis/jt_operator.h	/^    int J0, g0, T0_min, T0_max;$/;"	m	struct:basis::OperatorLabelsJT	typeref:typename:int
TwiceValue	src/basis/am/halfint.h	/^  int TwiceValue() const$/;"	f	class:HalfInt	typeref:typename:int
TwiceValue	src/basis/am/halfint.h	/^inline int TwiceValue(const HalfInt& h)$/;"	f	typeref:typename:int
TwoBodyCutoffs	src/basis/many_body.cpp	/^  std::tuple<int,int> TwoBodyCutoffs(basis::Rank truncation_rank, int truncation_cutoff)$/;"	f	namespace:basis	typeref:typename:std::tuple<int,int>
TwoBodySectorsLSJT	src/basis/lsjt_scheme.cpp	/^  TwoBodySectorsLSJT::TwoBodySectorsLSJT($/;"	f	class:basis::TwoBodySectorsLSJT
TwoBodySectorsLSJT	src/basis/lsjt_scheme.h	/^    TwoBodySectorsLSJT() {};$/;"	f	class:basis::TwoBodySectorsLSJT
TwoBodySectorsLSJT	src/basis/lsjt_scheme.h	/^  class TwoBodySectorsLSJT$/;"	c	namespace:basis
TwoBodySectorsLSJTN	src/basis/lsjt_scheme.cpp	/^  TwoBodySectorsLSJTN::TwoBodySectorsLSJTN($/;"	f	class:basis::TwoBodySectorsLSJTN
TwoBodySectorsLSJTN	src/basis/lsjt_scheme.h	/^    TwoBodySectorsLSJTN() {};$/;"	f	class:basis::TwoBodySectorsLSJTN
TwoBodySectorsLSJTN	src/basis/lsjt_scheme.h	/^  class TwoBodySectorsLSJTN$/;"	c	namespace:basis
TwoBodySpaceLSJT	src/basis/lsjt_scheme.cpp	/^  TwoBodySpaceLSJT::TwoBodySpaceLSJT(basis::Rank truncation_rank, int truncation_cutoff)$/;"	f	class:basis::TwoBodySpaceLSJT
TwoBodySpaceLSJT	src/basis/lsjt_scheme.h	/^    TwoBodySpaceLSJT() {};$/;"	f	class:basis::TwoBodySpaceLSJT
TwoBodySpaceLSJT	src/basis/lsjt_scheme.h	/^  class TwoBodySpaceLSJT$/;"	c	namespace:basis
TwoBodySpaceLSJTN	src/basis/lsjt_scheme.cpp	/^  TwoBodySpaceLSJTN::TwoBodySpaceLSJTN(basis::Rank truncation_rank, int truncation_cutoff)$/;"	f	class:basis::TwoBodySpaceLSJTN
TwoBodySpaceLSJTN	src/basis/lsjt_scheme.h	/^    TwoBodySpaceLSJTN() {};$/;"	f	class:basis::TwoBodySpaceLSJTN
TwoBodySpaceLSJTN	src/basis/lsjt_scheme.h	/^  class TwoBodySpaceLSJTN$/;"	c	namespace:basis
TwoBodyStateLSJT	src/basis/lsjt_scheme.h	/^    TwoBodyStateLSJT(const SubspaceType& subspace, const StateLabelsType& state_labels)$/;"	f	class:basis::TwoBodyStateLSJT
TwoBodyStateLSJT	src/basis/lsjt_scheme.h	/^    TwoBodyStateLSJT(const SubspaceType& subspace, int index)$/;"	f	class:basis::TwoBodyStateLSJT
TwoBodyStateLSJT	src/basis/lsjt_scheme.h	/^  class TwoBodyStateLSJT$/;"	c	namespace:basis
TwoBodyStateLSJTLabels	src/basis/lsjt_scheme.h	/^  typedef std::tuple<int,int,int,int> TwoBodyStateLSJTLabels;$/;"	t	namespace:basis	typeref:typename:std::tuple<int,int,int,int>
TwoBodyStateLSJTN	src/basis/lsjt_scheme.h	/^    TwoBodyStateLSJTN(const SubspaceType& subspace, const StateLabelsType& state_labels)$/;"	f	class:basis::TwoBodyStateLSJTN
TwoBodyStateLSJTN	src/basis/lsjt_scheme.h	/^    TwoBodyStateLSJTN(const SubspaceType& subspace, int index)$/;"	f	class:basis::TwoBodyStateLSJTN
TwoBodyStateLSJTN	src/basis/lsjt_scheme.h	/^  class TwoBodyStateLSJTN$/;"	c	namespace:basis
TwoBodyStateLSJTNLabels	src/basis/lsjt_scheme.h	/^  typedef std::tuple<int,int,int,int> TwoBodyStateLSJTNLabels;$/;"	t	namespace:basis	typeref:typename:std::tuple<int,int,int,int>
TwoBodySubspaceLSJT	src/basis/lsjt_scheme.cpp	/^  TwoBodySubspaceLSJT::TwoBodySubspaceLSJT($/;"	f	class:basis::TwoBodySubspaceLSJT
TwoBodySubspaceLSJT	src/basis/lsjt_scheme.h	/^      TwoBodySubspaceLSJT() {};$/;"	f	class:basis::TwoBodySubspaceLSJT
TwoBodySubspaceLSJT	src/basis/lsjt_scheme.h	/^  class TwoBodySubspaceLSJT$/;"	c	namespace:basis
TwoBodySubspaceLSJTLabels	src/basis/lsjt_scheme.h	/^  typedef std::tuple<int,int,int,int,int> TwoBodySubspaceLSJTLabels;$/;"	t	namespace:basis	typeref:typename:std::tuple<int,int,int,int,int>
TwoBodySubspaceLSJTN	src/basis/lsjt_scheme.cpp	/^  TwoBodySubspaceLSJTN::TwoBodySubspaceLSJTN($/;"	f	class:basis::TwoBodySubspaceLSJTN
TwoBodySubspaceLSJTN	src/basis/lsjt_scheme.h	/^      TwoBodySubspaceLSJTN() {};$/;"	f	class:basis::TwoBodySubspaceLSJTN
TwoBodySubspaceLSJTN	src/basis/lsjt_scheme.h	/^  class TwoBodySubspaceLSJTN$/;"	c	namespace:basis
TwoBodySubspaceLSJTNLabels	src/basis/lsjt_scheme.h	/^  typedef std::tuple<int,int,int,int,int,int> TwoBodySubspaceLSJTNLabels;  \/\/ (MODIFICATION fo/;"	t	namespace:basis	typeref:typename:std::tuple<int,int,int,int,int,int>
Unitary6J	src/basis/am/wigner_gsl.h	/^    double Unitary6J($/;"	f	namespace:am	typeref:typename:double
Unitary6J2	src/basis/am/wigner_gsl_twice.h	/^    double Unitary6J2($/;"	f	namespace:am	typeref:typename:double
Unitary6JZ	src/basis/am/wigner_gsl.h	/^    double Unitary6JZ($/;"	f	namespace:am	typeref:typename:double
Unitary9J	src/basis/am/wigner_gsl.h	/^    double Unitary9J($/;"	f	namespace:am	typeref:typename:double
Unitary9J2	src/basis/am/wigner_gsl_twice.h	/^    double Unitary9J2($/;"	f	namespace:am	typeref:typename:double
UpperTriangularEntries	src/basis/operator.h	/^    int UpperTriangularEntries($/;"	f	namespace:basis	typeref:typename:int
ValidIndex	src/basis/basis.h	/^      int ValidIndex() const$/;"	f	class:basis::BaseState	typeref:typename:int
ValidLabels	src/basis/lsjt_scheme.cpp	/^  bool RelativeCMSubspaceLSJT::ValidLabels() const$/;"	f	class:basis::RelativeCMSubspaceLSJT	typeref:typename:bool
ValidLabels	src/basis/lsjt_scheme.cpp	/^  bool RelativeCMSubspaceLSJTN::ValidLabels() const$/;"	f	class:basis::RelativeCMSubspaceLSJTN	typeref:typename:bool
ValidLabels	src/basis/lsjt_scheme.cpp	/^  bool RelativeSubspaceLSJT::ValidLabels() const$/;"	f	class:basis::RelativeSubspaceLSJT	typeref:typename:bool
ValidLabels	src/basis/lsjt_scheme.cpp	/^  bool TwoBodySubspaceLSJT::ValidLabels() const$/;"	f	class:basis::TwoBodySubspaceLSJT	typeref:typename:bool
ValidLabels	src/basis/lsjt_scheme.cpp	/^  bool TwoBodySubspaceLSJTN::ValidLabels() const$/;"	f	class:basis::TwoBodySubspaceLSJTN	typeref:typename:bool
WIGNER2_GSL_H_	src/basis/am/wigner_gsl_twice.h	/^#define WIGNER2_GSL_H_$/;"	d
WIGNER_GSL_H_	src/basis/am/wigner_gsl.h	/^#define WIGNER_GSL_H_$/;"	d
Wigner3J	src/basis/am/wigner_gsl.h	/^    double Wigner3J($/;"	f	namespace:am	typeref:typename:double
Wigner3J2	src/basis/am/wigner_gsl_twice.h	/^    double Wigner3J2($/;"	f	namespace:am	typeref:typename:double
Wigner6J	src/basis/am/wigner_gsl.h	/^    double Wigner6J($/;"	f	namespace:am	typeref:typename:double
Wigner6J2	src/basis/am/wigner_gsl_twice.h	/^    double Wigner6J2($/;"	f	namespace:am	typeref:typename:double
Wigner9J	src/basis/am/wigner_gsl.h	/^    double Wigner9J($/;"	f	namespace:am	typeref:typename:double
Wigner9J2	src/basis/am/wigner_gsl_twice.h	/^    double Wigner9J2($/;"	f	namespace:am	typeref:typename:double
WriteRelativeCMOperatorComponentLSJT	src/basis/lsjt_operator.cpp	/^  void WriteRelativeCMOperatorComponentLSJT($/;"	f	namespace:basis	typeref:typename:void
WriteRelativeCMOperatorParametersLSJT	src/basis/lsjt_operator.cpp	/^  void WriteRelativeCMOperatorParametersLSJT($/;"	f	namespace:basis	typeref:typename:void
WriteRelativeOperatorComponentLSJT	src/basis/lsjt_operator.cpp	/^  void WriteRelativeOperatorComponentLSJT($/;"	f	namespace:basis	typeref:typename:void
WriteRelativeOperatorLSJT	src/basis/lsjt_operator.cpp	/^  void WriteRelativeOperatorLSJT($/;"	f	namespace:basis	typeref:typename:void
WriteRelativeOperatorParametersLSJT	src/basis/lsjt_operator.cpp	/^  void WriteRelativeOperatorParametersLSJT($/;"	f	namespace:basis	typeref:typename:void
WriteTwoBodyOperatorComponentLSJT	src/basis/lsjt_operator.cpp	/^  void WriteTwoBodyOperatorComponentLSJT($/;"	f	namespace:basis	typeref:typename:void
__CONSTANTS_H__	src/constants.h	/^#define __CONSTANTS_H__$/;"	d
__OPERATORS_H__	old_c/operators.h	/^#define __OPERATORS_H__$/;"	d
__TDHO_H__	old_c/tdho.h	/^#define __TDHO_H__$/;"	d
__UTILITY_H__	src/utility.h	/^#define __UTILITY_H__$/;"	d
__init__	main.py	/^    def __init__(self, operator, osc_energy, nmax, jmax):$/;"	m	class:MatrixFile
abs	src/basis/am/halfint.h	/^inline HalfInt abs(const HalfInt& h)$/;"	f	typeref:typename:HalfInt
add_to_file	main.py	/^        def add_to_file(fname):$/;"	f	member:MatrixFile.generate_files	file:
all	Makefile	/^all: $(exe)$/;"	t
am	src/basis/am/am.cpp	/^namespace am {$/;"	n	file:
am	src/basis/am/am.h	/^namespace am {$/;"	n
am	src/basis/am/racah_reduction.h	/^namespace am {$/;"	n
am	src/basis/am/rme.h	/^namespace am {$/;"	n
am	src/basis/am/wigner_gsl.h	/^namespace am {$/;"	n
am	src/basis/am/wigner_gsl_twice.h	/^namespace am {$/;"	n
b	old_c/tdho.h	/^struct wf_params { int n; int l; int ml; double b; };$/;"	m	struct:wf_params	typeref:typename:double
basis	src/basis/basis.h	/^namespace basis {$/;"	n
basis	src/basis/jt_operator.h	/^namespace basis {$/;"	n
basis	src/basis/lsjt_operator.cpp	/^namespace basis {$/;"	n	file:
basis	src/basis/lsjt_operator.h	/^namespace basis {$/;"	n
basis	src/basis/lsjt_scheme.cpp	/^namespace basis {$/;"	n	file:
basis	src/basis/lsjt_scheme.h	/^namespace basis {$/;"	n
basis	src/basis/many_body.cpp	/^namespace basis {$/;"	n	file:
basis	src/basis/many_body.h	/^namespace basis {$/;"	n
basis	src/basis/operator.h	/^namespace basis {$/;"	n
bra_subspace	src/basis/basis.h	/^      const SubspaceType& bra_subspace() const {return *bra_subspace_ptr_;}$/;"	f	class:basis::BaseSector	typeref:typename:const SubspaceType &
bra_subspace_index	src/basis/basis.h	/^      int bra_subspace_index() const {return bra_subspace_index_;}$/;"	f	class:basis::BaseSector	typeref:typename:int
bra_subspace_index_	src/basis/basis.h	/^      int bra_subspace_index_, ket_subspace_index_;$/;"	m	class:basis::BaseSector	typeref:typename:int
bra_subspace_ptr_	src/basis/basis.h	/^      const SubspaceType* bra_subspace_ptr_;$/;"	m	class:basis::BaseSector	typeref:typename:const SubspaceType *
calculate_rme	src/operator_rc_sq.cpp	/^    void ChargeRadiusOperator::calculate_rme(const basis::RelativeStateLSJT& bra,$/;"	f	class:chiral::ChargeRadiusOperator	typeref:typename:void
charge_radius	src/chiral.h	/^        charge_radius,$/;"	e	enum:chiral::Name
chiral	src/chiral.cpp	/^namespace chiral$/;"	n	file:
chiral	src/chiral.h	/^namespace chiral$/;"	n
chiral	src/operator_rc_sq.cpp	/^namespace chiral$/;"	n	file:
chiral	src/operator_rc_sq.h	/^namespace chiral$/;"	n
clean	Makefile	/^clean:$/;"	t
clebsch	src/utility.h	/^    inline double clebsch(int ja, int jb, int j, int mja, int mjb, int mj)$/;"	f	namespace:util	typeref:typename:double
constants	src/constants.h	/^namespace constants$/;"	n
create_file	main.py	/^        def create_file():$/;"	f	member:MatrixFile.generate_files	file:
data	old_c/operator_gt.c	/^struct data { int n; int l; }; $/;"	s	file:
delta	src/utility.h	/^    inline int delta(int a, int b) { return a == b; };$/;"	f	namespace:util	typeref:typename:int
dim	src/basis/am/am.h	/^    double dim(int j)$/;"	f	namespace:am	typeref:typename:double
dim	src/basis/am/am.h	/^    int dim(const HalfInt& j)$/;"	f	namespace:am	typeref:typename:int
dimension_	src/basis/basis.h	/^    int dimension_;$/;"	m	class:basis::BaseSubspace	typeref:typename:int
exe	Makefile	/^exe = ndrel.exe$/;"	m
extras	src/basis/am/project.mk	/^extras := README.md LICENSE.md$/;"	m
extras	src/basis/mcutils/project.mk	/^extras := README.md LICENSE.md$/;"	m
extras	src/basis/project.mk	/^extras := README.md LICENSE.md$/;"	m
from_input	main.py	/^    def from_input(cls):$/;"	m	class:MatrixFile
full	src/chiral.h	/^    { lo, nlo, n2lo, n3lo, n4lo, full };$/;"	e	enum:chiral::Order
g	src/basis/lsjt_scheme.h	/^      int g() const {return std::get<4>(labels_);}$/;"	f	class:basis::RelativeCMSubspaceLSJT	typeref:typename:int
g	src/basis/lsjt_scheme.h	/^      int g() const {return std::get<4>(labels_);}$/;"	f	class:basis::RelativeCMSubspaceLSJTN	typeref:typename:int
g	src/basis/lsjt_scheme.h	/^      int g() const {return std::get<4>(labels_);}$/;"	f	class:basis::RelativeSubspaceLSJT	typeref:typename:int
g	src/basis/lsjt_scheme.h	/^      int g() const {return std::get<4>(labels_);}$/;"	f	class:basis::TwoBodySubspaceLSJT	typeref:typename:int
g	src/basis/lsjt_scheme.h	/^      int g() const {return std::get<4>(labels_);}$/;"	f	class:basis::TwoBodySubspaceLSJTN	typeref:typename:int
g	src/basis/lsjt_scheme.h	/^    int g() const {return subspace().g();}$/;"	f	class:basis::RelativeCMStateLSJT	typeref:typename:int
g	src/basis/lsjt_scheme.h	/^    int g() const {return subspace().g();}$/;"	f	class:basis::RelativeCMStateLSJTN	typeref:typename:int
g	src/basis/lsjt_scheme.h	/^    int g() const {return subspace().g();}$/;"	f	class:basis::RelativeStateLSJT	typeref:typename:int
g	src/basis/lsjt_scheme.h	/^    int g() const {return subspace().g();}$/;"	f	class:basis::TwoBodyStateLSJT	typeref:typename:int
g	src/basis/lsjt_scheme.h	/^    int g() const {return subspace().g();}$/;"	f	class:basis::TwoBodyStateLSJTN	typeref:typename:int
g0	src/basis/jt_operator.h	/^    int J0, g0, T0_min, T0_max;$/;"	m	struct:basis::OperatorLabelsJT	typeref:typename:int
gamow_teller	src/chiral.h	/^        gamow_teller$/;"	e	enum:chiral::Name
gamow_teller_bare	old_c/operator_gt.c	/^double gamow_teller_bare(q_nums *ket, q_nums *bra, double *b)$/;"	f	typeref:typename:double
gamow_teller_n2lo	old_c/operator_gt.c	/^double gamow_teller_n2lo(q_nums *ket, q_nums *bra, double *b)$/;"	f	typeref:typename:double
gamow_teller_n2lo_d_term	old_c/operator_gt.c	/^double gamow_teller_n2lo_d_term(q_nums *ket, q_nums *bra, double *b)$/;"	f	typeref:typename:double
generate_files	main.py	/^    def generate_files(self):$/;"	m	class:MatrixFile
hash_value	src/basis/am/halfint.h	/^std::size_t hash_value(const HalfInt& h)$/;"	f	typeref:typename:std::size_t
identity	src/chiral.h	/^        identity,$/;"	e	enum:chiral::Name
index	src/basis/basis.h	/^      int index() const$/;"	f	class:basis::BaseState	typeref:typename:int
index_	src/basis/basis.h	/^      int index_;   \/\/\/< 0-based index within space$/;"	m	class:basis::BaseState	typeref:typename:int
isequal_q_nums	old_c/tdho.c	/^bool isequal_q_nums(q_nums *ket, q_nums *bra)$/;"	f	typeref:typename:bool
isequal_wf_params	old_c/tdho.c	/^bool isequal_wf_params(wf_params *ket, wf_params *bra)$/;"	f	typeref:typename:bool
j	old_c/tdho.h	/^    int j; int mj; int t; int mt; };$/;"	m	struct:q_nums	typeref:typename:int
jjJCoupledAngularMomentumJ1RME	src/basis/am/rme.h	/^  double jjJCoupledAngularMomentumJ1RME($/;"	f	namespace:am	typeref:typename:double
kASToNAS	src/basis/many_body.h	/^  enum class NormalizationConversion {kNone, kASToNAS, kNASToAS};$/;"	e	enum:basis::NormalizationConversion
kBoth	src/basis/basis.h	/^  enum class SectorDirection {kCanonical,kBoth};$/;"	e	enum:basis::SectorDirection
kCanonical	src/basis/basis.h	/^  enum class SectorDirection {kCanonical,kBoth};$/;"	e	enum:basis::SectorDirection
kFourBody	src/basis/many_body.h	/^  enum class Rank {kOneBody=1, kTwoBody=2, kThreeBody=3, kFourBody=4};$/;"	e	enum:basis::Rank
kHermitian	src/basis/jt_operator.h	/^  enum class SymmetryPhaseMode {kHermitian=0};$/;"	e	enum:basis::SymmetryPhaseMode
kInvSqrt4Pi	src/basis/am/rme.h	/^  constexpr double kInvSqrt4Pi = 0.282094791773878143474039725780386292922025314664;$/;"	v	namespace:am	typeref:typename:double
kNASToAS	src/basis/many_body.h	/^  enum class NormalizationConversion {kNone, kASToNAS, kNASToAS};$/;"	e	enum:basis::NormalizationConversion
kNone	src/basis/basis.h	/^  static const int kNone = -1;$/;"	v	namespace:basis	typeref:typename:const int
kNone	src/basis/many_body.h	/^  enum class NormalizationConversion {kNone, kASToNAS, kNASToAS};$/;"	e	enum:basis::NormalizationConversion
kOneBody	src/basis/many_body.h	/^  enum class Rank {kOneBody=1, kTwoBody=2, kThreeBody=3, kFourBody=4};$/;"	e	enum:basis::Rank
kPi	src/basis/am/rme.h	/^  constexpr double kPi = 3.141592653589793238462643383279502884197169399375;$/;"	v	namespace:am	typeref:typename:double
kSqrt4Pi	src/basis/am/rme.h	/^  constexpr double kSqrt4Pi = 3.544907701811032054596334966682290365595098912244;$/;"	v	namespace:am	typeref:typename:double
kThreeBody	src/basis/many_body.h	/^  enum class Rank {kOneBody=1, kTwoBody=2, kThreeBody=3, kFourBody=4};$/;"	e	enum:basis::Rank
kTwoBody	src/basis/many_body.h	/^  enum class Rank {kOneBody=1, kTwoBody=2, kThreeBody=3, kFourBody=4};$/;"	e	enum:basis::Rank
ket_subspace	src/basis/basis.h	/^      const SubspaceType& ket_subspace() const {return *ket_subspace_ptr_;}$/;"	f	class:basis::BaseSector	typeref:typename:const SubspaceType &
ket_subspace_index	src/basis/basis.h	/^      int ket_subspace_index() const {return ket_subspace_index_;}$/;"	f	class:basis::BaseSector	typeref:typename:int
ket_subspace_index_	src/basis/basis.h	/^      int bra_subspace_index_, ket_subspace_index_;$/;"	m	class:basis::BaseSector	typeref:typename:int
ket_subspace_ptr_	src/basis/basis.h	/^      const SubspaceType* ket_subspace_ptr_;$/;"	m	class:basis::BaseSector	typeref:typename:const SubspaceType *
l	old_c/operator_gt.c	/^struct data { int n; int l; }; $/;"	m	struct:data	typeref:typename:int	file:
l	old_c/tdho.h	/^struct q_nums { int n; int l; int N; int L; int s;$/;"	m	struct:q_nums	typeref:typename:int
l	old_c/tdho.h	/^struct wf_params { int n; int l; int ml; double b; };$/;"	m	struct:wf_params	typeref:typename:int
l1	src/basis/lsjt_scheme.h	/^    int l1() const {return std::get<1>(labels());}$/;"	f	class:basis::TwoBodyStateLSJT	typeref:typename:int
l1	src/basis/lsjt_scheme.h	/^    int l1() const {return std::get<1>(labels());}$/;"	f	class:basis::TwoBodyStateLSJTN	typeref:typename:int
l2	src/basis/lsjt_scheme.h	/^    int l2() const {return std::get<3>(labels());}$/;"	f	class:basis::TwoBodyStateLSJT	typeref:typename:int
l2	src/basis/lsjt_scheme.h	/^    int l2() const {return std::get<3>(labels());}$/;"	f	class:basis::TwoBodyStateLSJTN	typeref:typename:int
labels	src/basis/basis.h	/^      const StateLabelsType& labels() const$/;"	f	class:basis::BaseState	typeref:typename:const StateLabelsType &
labels	src/basis/basis.h	/^    const SubspaceLabelsType& labels() const$/;"	f	class:basis::BaseSubspace	typeref:typename:const SubspaceLabelsType &
labels_	src/basis/basis.h	/^    SubspaceLabelsType labels_;$/;"	m	class:basis::BaseSubspace	typeref:typename:SubspaceLabelsType
lc	src/basis/lsjt_scheme.h	/^    int lc() const {return std::get<3>(labels());}$/;"	f	class:basis::RelativeCMStateLSJT	typeref:typename:int
lc	src/basis/lsjt_scheme.h	/^    int lc() const {return std::get<3>(labels());}$/;"	f	class:basis::RelativeCMStateLSJTN	typeref:typename:int
lib	Makefile	/^lib = $(wildcard *.a)$/;"	m
lo	src/chiral.h	/^    { lo, nlo, n2lo, n3lo, n4lo, full };$/;"	e	enum:chiral::Order
lookup_	src/basis/basis.h	/^      std::map<typename SectorType::KeyType,int> lookup_;$/;"	m	class:basis::BaseSectors	typeref:typename:std::map<typename SectorType::KeyType,int>
lookup_	src/basis/basis.h	/^      std::map<typename SubspaceType::SubspaceLabelsType,int> lookup_;$/;"	m	class:basis::BaseSpace	typeref:typename:std::map<typename SubspaceType::SubspaceLabelsType,int>
lookup_	src/basis/basis.h	/^      std::unordered_map<typename SectorType::KeyType,int,boost::hash<typename SectorType::KeyTy/;"	m	class:basis::BaseSectors	typeref:typename:std::unordered_map<typename SectorType::KeyType,int,boost::hash<typename SectorType::KeyType>>
lookup_	src/basis/basis.h	/^      std::unordered_map<typename SubspaceType::SubspaceLabelsType,int,boost::hash<typename Subs/;"	m	class:basis::BaseSpace	typeref:typename:std::unordered_map<typename SubspaceType::SubspaceLabelsType,int,boost::hash<typename SubspaceType::SubspaceLabelsType>>
lookup_	src/basis/basis.h	/^    std::map<StateLabelsType,int> lookup_;$/;"	m	class:basis::BaseSubspace	typeref:typename:std::map<StateLabelsType,int>
lookup_	src/basis/basis.h	/^    std::unordered_map<StateLabelsType,int,boost::hash<StateLabelsType>> lookup_;$/;"	m	class:basis::BaseSubspace	typeref:typename:std::unordered_map<StateLabelsType,int,boost::hash<StateLabelsType>>
lr	src/basis/lsjt_scheme.h	/^    int lr() const {return std::get<1>(labels());}$/;"	f	class:basis::RelativeCMStateLSJT	typeref:typename:int
lr	src/basis/lsjt_scheme.h	/^    int lr() const {return std::get<1>(labels());}$/;"	f	class:basis::RelativeCMStateLSJTN	typeref:typename:int
main	main.py	/^def main():$/;"	f
main	old_c/main.c	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	src/ndrel.cpp	/^int main()$/;"	f	typeref:typename:int
mcutils	src/basis/mcutils/parsing.cpp	/^namespace mcutils$/;"	n	file:
mcutils	src/basis/mcutils/parsing.h	/^namespace mcutils$/;"	n
mj	old_c/tdho.h	/^    int j; int mj; int t; int mt; };$/;"	m	struct:q_nums	typeref:typename:int
ml	old_c/tdho.h	/^struct wf_params { int n; int l; int ml; double b; };$/;"	m	struct:wf_params	typeref:typename:int
mt	old_c/tdho.h	/^    int j; int mj; int t; int mt; };$/;"	m	struct:q_nums	typeref:typename:int
multiplicity_index	src/basis/basis.h	/^      int multiplicity_index() const {return multiplicity_index_;}$/;"	f	class:basis::BaseSector	typeref:typename:int
multiplicity_index_	src/basis/basis.h	/^      int multiplicity_index_;$/;"	m	class:basis::BaseSector	typeref:typename:int
n	old_c/operator_gt.c	/^struct data { int n; int l; }; $/;"	m	struct:data	typeref:typename:int	file:
n	old_c/tdho.h	/^struct q_nums { int n; int l; int N; int L; int s;$/;"	m	struct:q_nums	typeref:typename:int
n	old_c/tdho.h	/^struct wf_params { int n; int l; int ml; double b; };$/;"	m	struct:wf_params	typeref:typename:int
n	src/basis/lsjt_scheme.h	/^    int n() const {return (N()-L())\/2;}$/;"	f	class:basis::RelativeStateLSJT	typeref:typename:int
n2lo	src/chiral.h	/^    { lo, nlo, n2lo, n3lo, n4lo, full };$/;"	e	enum:chiral::Order
n3lo	src/chiral.h	/^    { lo, nlo, n2lo, n3lo, n4lo, full };$/;"	e	enum:chiral::Order
n4lo	src/chiral.h	/^    { lo, nlo, n2lo, n3lo, n4lo, full };$/;"	e	enum:chiral::Order
name	src/chiral.h	/^        Name name;$/;"	m	class:chiral::ChiralOperator	typeref:typename:Name
nlo	src/chiral.h	/^    { lo, nlo, n2lo, n3lo, n4lo, full };$/;"	e	enum:chiral::Order
norm_nl	old_c/tdho.c	/^double norm_nl(const wf_params *params)$/;"	f	typeref:typename:double
obj	Makefile	/^obj = $(src:.cpp=.o)$/;"	m
operator !=	src/basis/am/halfint.h	/^inline bool operator != (const HalfInt& h1, const HalfInt& h2)$/;"	f	typeref:typename:bool
operator *	src/basis/am/halfint.h	/^inline HalfInt operator * (const HalfInt& a, const int& b)$/;"	f	typeref:typename:HalfInt
operator *	src/basis/am/halfint.h	/^inline HalfInt operator * (const int& a, const HalfInt& b)$/;"	f	typeref:typename:HalfInt
operator *=	src/basis/am/halfint.h	/^inline HalfInt& HalfInt::operator *=(const int& b)$/;"	f	class:HalfInt	typeref:typename:HalfInt &
operator +	src/basis/am/halfint.h	/^inline HalfInt HalfInt::operator + () const$/;"	f	class:HalfInt	typeref:typename:HalfInt
operator +	src/basis/am/halfint.h	/^inline HalfInt operator + (const HalfInt& a, const HalfInt& b)$/;"	f	typeref:typename:HalfInt
operator ++	src/basis/am/halfint.h	/^inline HalfInt HalfInt::operator ++ (int)$/;"	f	class:HalfInt	typeref:typename:HalfInt
operator ++	src/basis/am/halfint.h	/^inline HalfInt& HalfInt::operator ++ ()$/;"	f	class:HalfInt	typeref:typename:HalfInt &
operator +=	src/basis/am/halfint.h	/^inline HalfInt& HalfInt::operator +=(const HalfInt& b)$/;"	f	class:HalfInt	typeref:typename:HalfInt &
operator -	src/basis/am/halfint.h	/^inline HalfInt HalfInt::operator - () const$/;"	f	class:HalfInt	typeref:typename:HalfInt
operator -	src/basis/am/halfint.h	/^inline HalfInt operator - (const HalfInt& a, const HalfInt& b)$/;"	f	typeref:typename:HalfInt
operator --	src/basis/am/halfint.h	/^inline HalfInt HalfInt::operator -- (int)$/;"	f	class:HalfInt	typeref:typename:HalfInt
operator --	src/basis/am/halfint.h	/^inline HalfInt& HalfInt::operator -- ()$/;"	f	class:HalfInt	typeref:typename:HalfInt &
operator -=	src/basis/am/halfint.h	/^inline HalfInt& HalfInt::operator -=(const HalfInt& b)$/;"	f	class:HalfInt	typeref:typename:HalfInt &
operator <	src/basis/am/halfint.h	/^inline bool operator < (const HalfInt& h1, const HalfInt& h2)$/;"	f	typeref:typename:bool
operator <<	src/basis/am/halfint.cpp	/^std::ostream& operator<< (std::ostream& os, const HalfInt& h)$/;"	f	typeref:typename:std::ostream &
operator <<	src/basis/am/halfint.cpp	/^std::ostream& operator<< (std::ostream& os, const HalfInt::pair& r)$/;"	f	typeref:typename:std::ostream &
operator <=	src/basis/am/halfint.h	/^inline bool operator <= (const HalfInt& h1, const HalfInt& h2)$/;"	f	typeref:typename:bool
operator ==	src/basis/am/halfint.h	/^inline bool operator == (const HalfInt& h1, const HalfInt& h2)$/;"	f	typeref:typename:bool
operator >	src/basis/am/halfint.h	/^inline bool operator > (const HalfInt& h1, const HalfInt& h2)$/;"	f	typeref:typename:bool
operator >=	src/basis/am/halfint.h	/^inline bool operator >= (const HalfInt& h1, const HalfInt& h2)$/;"	f	typeref:typename:bool
operator_gt	old_c/operator_gt.c	/^double operator_gt(char *order, q_nums *ket, q_nums *bra, double *b)$/;"	f	typeref:typename:double
operator_r_sq	old_c/operator_r_sq.c	/^double operator_r_sq(char *order, q_nums *ket, q_nums *bra, double *b)$/;"	f	typeref:typename:double
order	src/chiral.h	/^        Order order;$/;"	m	class:chiral::ChiralOperator	typeref:typename:Order
pair	src/basis/am/halfint.h	/^  typedef std::pair<HalfInt,HalfInt> pair;  \/\/ used by am$/;"	t	class:HalfInt	typeref:typename:std::pair<HalfInt,HalfInt>
plm	old_c/operator_r_sq.c	/^double plm(int l, int m)$/;"	f	typeref:typename:double
print_rme	old_c/main.c	/^void print_rme(char *operator, char *order, q_nums *ket,$/;"	f	typeref:typename:void
project_name	src/basis/am/project.mk	/^project_name := am$/;"	m
project_name	src/basis/mcutils/project.mk	/^project_name := mcutils$/;"	m
project_name	src/basis/project.mk	/^project_name := basis$/;"	m
q_nums	old_c/tdho.h	/^struct q_nums { int n; int l; int N; int L; int s;$/;"	s
q_nums	old_c/tdho.h	/^typedef struct q_nums q_nums;$/;"	t	typeref:struct:q_nums
r_sq_bare	old_c/operator_r_sq.c	/^double r_sq_bare(q_nums *ket, q_nums *bra, double *b)$/;"	f	typeref:typename:double
r_sq_lo	old_c/operator_r_sq.c	/^double r_sq_lo(q_nums *ket, q_nums *bra, double *b)$/;"	f	typeref:typename:double
r_sq_n2lo	old_c/operator_r_sq.c	/^double r_sq_n2lo(q_nums *ket, q_nums *bra, double *b)$/;"	f	typeref:typename:double
radial_integral	old_c/operator_gt.c	/^double radial_integral(int n, int l)$/;"	f	typeref:typename:double
radial_integral_bare	old_c/operator_r_sq.c	/^double radial_integral_bare(int ni, int li, int nf, int lf, double b)$/;"	f	typeref:typename:double
radial_integral_lo	old_c/operator_r_sq.c	/^double radial_integral_lo(int ni, int li, int nf, int lf, double b)$/;"	f	typeref:typename:double
radial_integrand	old_c/operator_gt.c	/^double radial_integrand(double y, void *userdata)$/;"	f	typeref:typename:double
radial_nl	old_c/tdho.c	/^double radial_nl(double p, const wf_params *params)$/;"	f	typeref:typename:double
rc_sq_full	src/operator_rc_sq.cpp	/^    double rc_sq_full(const basis::RelativeStateLSJT& bra,$/;"	f	namespace:chiral	typeref:typename:double
rc_sq_lo	src/operator_rc_sq.cpp	/^    double rc_sq_lo(const basis::RelativeStateLSJT& bra,$/;"	f	namespace:chiral	typeref:typename:double
rc_sq_n2lo	src/operator_rc_sq.cpp	/^    double rc_sq_n2lo(const basis::RelativeStateLSJT& bra,$/;"	f	namespace:chiral	typeref:typename:double
rc_sq_n3lo	src/operator_rc_sq.cpp	/^    double rc_sq_n3lo(const basis::RelativeStateLSJT& bra,$/;"	f	namespace:chiral	typeref:typename:double
rc_sq_n4lo	src/operator_rc_sq.cpp	/^    double rc_sq_n4lo(const basis::RelativeStateLSJT& bra,$/;"	f	namespace:chiral	typeref:typename:double
rc_sq_nlo	src/operator_rc_sq.cpp	/^    double rc_sq_nlo(const basis::RelativeStateLSJT& bra,$/;"	f	namespace:chiral	typeref:typename:double
s	old_c/tdho.h	/^struct q_nums { int n; int l; int N; int L; int s;$/;"	m	struct:q_nums	typeref:typename:int
sectors_	src/basis/basis.h	/^      std::vector<SectorType> sectors_;$/;"	m	class:basis::BaseSectors	typeref:typename:std::vector<SectorType>
set_q_nums	old_c/tdho.c	/^void set_q_nums(q_nums *nums, int n, int l, int N, int L,$/;"	f	typeref:typename:void
size	src/basis/basis.h	/^      int size() const$/;"	f	class:basis::BaseSectors	typeref:typename:int
size	src/basis/basis.h	/^      int size() const$/;"	f	class:basis::BaseSpace	typeref:typename:int
size	src/basis/basis.h	/^    int size() const$/;"	f	class:basis::BaseSubspace	typeref:typename:int
spherical_integral_lo	old_c/operator_r_sq.c	/^double spherical_integral_lo(int li, int mli, int lf, int mlf)$/;"	f	typeref:typename:double
src	Makefile	/^src = $(wildcard src\/*.cpp) \\$/;"	m
state_table_	src/basis/basis.h	/^    std::vector<StateLabelsType> state_table_;$/;"	m	class:basis::BaseSubspace	typeref:typename:std::vector<StateLabelsType>
subspace	src/basis/basis.h	/^      const SubspaceType& subspace() const$/;"	f	class:basis::BaseState	typeref:typename:const SubspaceType &
subspace_ptr_	src/basis/basis.h	/^      const SubspaceType* subspace_ptr_;  \/\/\/< subspace in which state lies$/;"	m	class:basis::BaseState	typeref:typename:const SubspaceType *
subspaces_	src/basis/basis.h	/^      std::vector<SubspaceType> subspaces_;$/;"	m	class:basis::BaseSpace	typeref:typename:std::vector<SubspaceType>
symmetry_phase_mode	src/basis/jt_operator.h	/^    basis::SymmetryPhaseMode symmetry_phase_mode;$/;"	m	struct:basis::OperatorLabelsJT	typeref:typename:basis::SymmetryPhaseMode
t	old_c/tdho.h	/^    int j; int mj; int t; int mt; };$/;"	m	struct:q_nums	typeref:typename:int
twice_value_	src/basis/am/halfint.h	/^  int twice_value_;$/;"	m	class:HalfInt	typeref:typename:int
util	src/utility.h	/^namespace util$/;"	n
vector	src/basis/am/halfint.h	/^  typedef std::vector<HalfInt> vector;  \/\/ used by am$/;"	t	class:HalfInt	typeref:typename:std::vector<HalfInt>
wavefunc_nlm_imag	old_c/tdho.c	/^double wavefunc_nlm_imag(double p, double theta,$/;"	f	typeref:typename:double
wavefunc_nlm_real	old_c/tdho.c	/^double wavefunc_nlm_real(double p, double theta,$/;"	f	typeref:typename:double
wf_params	old_c/tdho.h	/^struct wf_params { int n; int l; int ml; double b; };$/;"	s
wf_params	old_c/tdho.h	/^typedef struct wf_params wf_params;$/;"	t	typeref:struct:wf_params
y_lm_imag	old_c/tdho.c	/^double y_lm_imag(double theta, double phi, const wf_params *params)$/;"	f	typeref:typename:double
y_lm_real	old_c/tdho.c	/^double y_lm_real(double theta, double phi, const wf_params *params)$/;"	f	typeref:typename:double
~ChargeRadiusOperator	src/operator_rc_sq.cpp	/^    ChargeRadiusOperator::~ChargeRadiusOperator() {}$/;"	f	class:chiral::ChargeRadiusOperator
~ChiralOperator	src/chiral.cpp	/^    ChiralOperator::~ChiralOperator() {}$/;"	f	class:chiral::ChiralOperator
